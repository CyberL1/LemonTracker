@using LemonTracker.Models
@using Microsoft.AspNetCore.Components.Rendering

<div class="px-4 bg-slate-600 self-center w-full rounded-xl shadow-slate-900 drop-shadow-md max-w-[1080px]">
    <div class="flex py-6 gap-4 text-slate-900 font-mono text-sm">
        <div class="grow">
            <span class="text-slate-400">Title:</span>
            <input type="text" class="px-2 mt-2 block w-full bg-white rounded-md text-sm shadow-sm" value="@CurrentModule.Title"/>
        </div>
        <div class="grow">
            <span class="text-slate-400">Author:</span>
            <input type="text" class="px-2 mt-2 block w-full bg-white rounded-md text-sm shadow-sm" value="@CurrentModule.Author"/>
        </div>
    </div>
    <div class="flex overflow-auto text-center text-lg shadow-slate-900 font-mono gap-1">
        @for (var index = 0; index < CurrentModule.Patterns.Count; index++)
        {
            var indexCopy = index;
            var pattern = CurrentModule.Patterns[indexCopy];
            <div
                @onclick="@(() => SwitchPattern(indexCopy))"
                class="flex-shrink-0 w-8 hover:bg-slate-400 rounded-sm cursor-pointer bg-slate-500 text-slate-900 border border-slate-400">
                @pattern.Number
            </div>
        }
    </div>
    <table class="mx-auto my-4 bg-slate-700 drop-shadow-md border-separate border-spacing-2 rounded-lg font-mono text-slate-400 text-xl">
        <thead>
        <tr class="text-sm text-yellow-200">
            <th></th>
            <th>Envelope</th>
            <th>Noise</th>
            <th>Channel A</th>
            <th>Channel B</th>
            <th>Channel C</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>
                <table>
                    @for (var i = 0; i < CurrentPattern.Channels[0].ChannelRows.Count; i++)
                    {
                        <tr>
                            <td>@i.ToString("X2")</td>
                        </tr>
                    }
                </table>
            </td>
            <td class="p-4">
                <table>
                </table>
            </td>
            <td class="p-4">
                <table>
                </table>
            </td>

            @foreach (var channel in CurrentPattern.Channels)
            {
                @_renderChannel(channel)
            }

        </tr>
        </tbody>
    </table>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public Module CurrentModule { get; set; } = default!;

    private Pattern CurrentPattern { get; set; } = new();

    protected override void OnInitialized()
    {
        CurrentPattern = CurrentModule.Patterns[0];
    }

    private void SwitchPattern(int index)
    {
        CurrentPattern = CurrentModule.Patterns[index];
    }

    private RenderFragment<Channel> _renderChannel = value =>
    {
        return
            @<td class="p-4" @key="value">
                <table class="border-spacing-0 border-collapse">
                    <tbody class="border-t border-transparent">
                    @foreach (var row in value.ChannelRows)
                    {
                        <tr @key="row">
                            <td class="@(row.HasData ? "text-slate-100" : "text-slate-500")">@row.NoteData</td>
                            <td class="@(row.Instrument != '.' ? "text-blue-300" : "text-slate-500")">@(row.Instrument)</td>
                            <td class="@(row.Envelope != '.' ? "text-blue-300" : "text-slate-500")">@(row.Envelope)</td>
                            <td class="@(row.Ornament != '.' ? "text-blue-300" : "text-slate-500")">@(row.Ornament)</td>
                            <td class="@(row.Volume != '.' ? "text-blue-300" : "text-slate-500")">@(row.Volume)</td>
                            <td class="@(row.Effect != '.' ? "text-yellow-300" : "text-slate-500")">@(row.Effect)</td>
                            <td class="@(row.EffectParamX != '.' ? "text-yellow-300" : "text-slate-500")">@(row.EffectParamX)</td>
                            <td class="@(row.EffectParamY != '.' ? "text-yellow-300" : "text-slate-500")">@(row.EffectParamY)</td>
                            <td class="@(row.EffectParamZ != '.' ? "text-yellow-300" : "text-slate-500")">@(row.EffectParamZ)</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </td>;
    };
}