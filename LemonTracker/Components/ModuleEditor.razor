@using LemonTracker.Models
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using LemonTracker.Extensions

<div class="px-4 bg-slate-600 self-center w-full rounded-xl shadow-slate-900 drop-shadow-md max-w-[1080px]">
    <div class="flex py-6 gap-4 text-slate-900 font-mono text-sm">
        <div class="grow">
            <span class="text-slate-400">Title:</span>
            <input type="text" class="px-2 mt-2 block w-full bg-white rounded-md text-sm shadow-sm" value="@CurrentModule.Title"/>
        </div>
        <div class="grow">
            <span class="text-slate-400">Author:</span>
            <input type="text" class="px-2 mt-2 block w-full bg-white rounded-md text-sm shadow-sm" value="@CurrentModule.Author"/>
        </div>
    </div>
    <div class="flex overflow-auto text-center text-xl shadow-slate-900 font-mono gap-[2px]">
        @for (var index = 0; index < CurrentModule.Patterns.Count; index++)
        {
            var indexCopy = index;
            var pattern = CurrentModule.Patterns[indexCopy];

            if (index == _currentPatternIndex)
            {
                <div
                    class="flex-shrink-0 w-8 rounded-sm bg-blue-600 cursor-default text-slate-200 border border-blue-400">
                    @pattern.Number
                </div>
            }
            else
            {
                <div
                    @onclick="@(() => SwitchPattern(indexCopy))"
                    class="flex-shrink-0 w-8 hover:bg-slate-400 rounded-sm cursor-pointer bg-slate-500 text-slate-900 border border-slate-400">
                    @pattern.Number
                </div>
            }
        }
    </div>
    <table class="mx-auto my-4 bg-slate-700 drop-shadow-md border-separate border-spacing-2 rounded-lg font-mono text-slate-400 text-xl">
        <thead>
        <tr class="text-sm text-yellow-200">
            <th></th>
            <th>Envelope</th>
            <th>Noise</th>
            <th>Channel A</th>
            <th>Channel B</th>
            <th>Channel C</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>
                <table>
                    @for (var i = 0; i < CurrentPattern.Channels[0].ChannelRows.Count; i++)
                    {
                        <tr>
                            <td>@i.ToString("X2")</td>
                        </tr>
                    }
                </table>
            </td>
            <td>
                <table>
                    @foreach (var row in CurrentPattern.PatternRows)
                    {
                        <tr>
                            <td>@row.EnvelopeValue.ToString("X4")</td>
                        </tr>
                    }
                </table>
            </td>
            <td>
                <table>
                    @foreach (var row in CurrentPattern.PatternRows)
                    {
                        <tr>
                            <td>@row.NoiseValue.ToString("X2")</td>
                        </tr>
                    }
                </table>
            </td>

            @foreach (var channel in CurrentPattern.Channels)
            {
                @_renderChannel(channel)
            }

        </tr>
        </tbody>
    </table>
</div>

@code {

    private Module _currentModule = default!;

    [Parameter]
    [EditorRequired]
    public Module CurrentModule
    {
        get => _currentModule;
        set
        {
            _currentModule = value;
            SwitchPattern(0);
        }
    }

    private Pattern CurrentPattern { get; set; } = new();

    private int _currentPatternIndex;

    private void SwitchPattern(int index)
    {
        CurrentPattern = CurrentModule.Patterns[index];
        _currentPatternIndex = index;
    }

    private RenderFragment<Channel> _renderChannel = value =>
    {
        return
            @<td class="p-4" @key="value">
                <table class="border-spacing-0 border-collapse">
                    <tbody class="border-t border-transparent">
                    @foreach (var row in value.ChannelRows)
                    {
                        <tr @key="row">
                            <td class="@DisplayActiveOrInactive(row.HasNoteData, "text-slate-100")">@row.NoteData</td>
                            <td class="@DisplayActiveOrInactive(!row.Instrument.IsEmptyValue(), "text-blue-300")">@row.Instrument</td>
                            <td class="@DisplayActiveOrInactive(!row.Envelope.IsEmptyValue(), "text-blue-300")">@row.Envelope</td>
                            <td class="@DisplayActiveOrInactive(!row.Ornament.IsEmptyValue(), "text-blue-300", "text-slate-500")">@row.Ornament</td>
                            <td class="@DisplayActiveOrInactive(!row.Volume.IsEmptyValue(), "text-blue-300", "text-slate-500")">@row.Volume</td>
                            <td class="@DisplayActiveOrInactive(!row.Effect.IsEmptyValue(), "text-yellow-300", "text-slate-500")">@row.Effect</td>
                            <td class="@DisplayActiveOrInactive(!row.EffectParamX.IsEmptyValue(), "text-yellow-300", "text-slate-500")">@row.EffectParamX</td>
                            <td class="@DisplayActiveOrInactive(!row.EffectParamY.IsEmptyValue(), "text-yellow-300", "text-slate-500")">@row.EffectParamY</td>
                            <td class="@DisplayActiveOrInactive(!row.EffectParamZ.IsEmptyValue(), "text-yellow-300", "text-slate-500")">@row.EffectParamZ</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </td>;
    };

    private static string DisplayActiveOrInactive(bool predicateValue, string activeClass, string inactiveClass = "text-slate-500")
    {
        return predicateValue ? activeClass : inactiveClass;
    }

}